rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helpers de base pour alléger les conditions
    function isAuthed() { return request.auth != null; }
    function isSelf(uid) { return isAuthed() && request.auth.uid == uid; }

    // Players: lecture publique, écriture contrôlée au strict minimum
    match /players/{playerId} {
      allow read: if true;

      // Autoriser la MAJ seulement par le joueur lié :
      // - Cas 1: déjà lié -> uid inchangé et = request.auth.uid
      // - Cas 2: première liaison -> champ uid manquant OU null -> nouvel uid = request.auth.uid
      //   (l'email utilisé pour l'auth peut être quelconque)
      allow update: if isAuthed() && (
        // Déjà lié : l'uid ne change pas
        (resource.data.uid == request.auth.uid && (!('uid' in request.resource.data) || request.resource.data.uid == resource.data.uid))
        ||
        // Première liaison : uid absent ou null -> on peut le définir à l'uid appelant
        ((!('uid' in resource.data) || resource.data.uid == null) && ('uid' in request.resource.data) && request.resource.data.uid == request.auth.uid)
      )
      // Empêcher toute tentative de bascule de rôle depuis le client
      && (!('isCaptain' in request.resource.data) || request.resource.data.isCaptain == resource.data.isCaptain);

      // Pas de création/suppression côté client
      allow create, delete: if false;
    }

    // Lineups / Match sheets / Player ratings: écriture autorisée si authentifié
    match /lineups/{docId} {
      allow read: if true;
      allow write: if isAuthed();
    }
    match /match_sheets/{docId} {
      allow read: if true;
      // Only captains can create/update match sheets
      allow create, update: if isAuthed() && isCaptain(request.auth.uid);
      allow delete: if false;
    }
    match /player_ratings/{docId} {
      allow read: if true;
      // allow write if authenticated - match date validation is handled in the application
      allow write: if isAuthed() &&
        ('matchId' in request.resource.data) &&
        ('ratedPlayerId' in request.resource.data) &&
        ('raterPlayerId' in request.resource.data) &&
        ('rating' in request.resource.data);
    }

    // Presets: allow captains to create/update
    match /presets/{docId} {
      allow read: if true;
      allow create, update: if isAuthed() && isCaptain(request.auth.uid);
      allow delete: if false;
    }

    // Match player stats: captains only
    match /match_player_stats/{docId} {
      allow read: if true;
      allow create, update: if isAuthed() && isCaptain(request.auth.uid);
      allow delete: if false;
    }

    // Matches: lecture publique, pas d'écriture côté client (sauf capitaines)
    match /matches/{docId} {
      allow read: if true;
      // Only captains can create/update matches
      allow create, update: if isAuthed() && isCaptain(request.auth.uid);
      allow delete: if false;
    }

    // Users meta: l'utilisateur connecté peut créer/mettre à jour son propre doc meta
    match /users/{playerId} {
      allow read: if isAuthed();
      // Allow create if the user is creating their own document
      allow create: if isAuthed() && 
        request.resource.data.uid == request.auth.uid && 
        request.resource.data.playerId == playerId;
      // Allow update if the document belongs to the authenticated user
      allow update: if isAuthed() && 
        (resource.data.uid == request.auth.uid || 
         // Allow initial linking if uid is null/empty
         (resource.data.uid == null && request.resource.data.uid == request.auth.uid)) && 
        resource.data.playerId == playerId &&
        (!('uid' in request.resource.data) || request.resource.data.uid == request.auth.uid) &&
        (!('playerId' in request.resource.data) || request.resource.data.playerId == resource.data.playerId);
      allow delete: if false;
    }



    // Index des rôles par uid: chaque utilisateur peut créer/mettre à jour son propre document
    match /users_by_uid/{uid} {
      allow read: if isSelf(uid);
      // Allow create/update if user is creating/updating their own document
      allow create, update: if isSelf(uid) && (
        !('roles' in request.resource.data) || (request.resource.data.roles is list)
      );
      allow delete: if false;
    }

    // Fonction pour vérifier si un utilisateur est capitaine
    function isCaptain(uid) {
      // Check role by uid mapping: users_by_uid/{uid}
      return exists(/databases/$(database)/documents/users_by_uid/$(uid)) &&
             ("roles" in get(/databases/$(database)/documents/users_by_uid/$(uid)).data) &&
             get(/databases/$(database)/documents/users_by_uid/$(uid)).data.roles.hasAny(["captain"]);
    }

    // Par défaut: lecture publique, pas d'écriture
    match /{document=**} {
      allow read: if true;
      allow write: if false;
    }
  }
}